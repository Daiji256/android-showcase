<resources>
    <string name="feature_nav_args_title">"Navigation Arguments"</string>
    <string name="feature_nav_args_sender_doc_summary_md">"Clicking any button navigates to a new screen and sends `arg` as an argument. The sending method is fixed, while the receiving method differs."</string>
    <string name="feature_nav_args_sender_doc_arg_label_md">"`arg`"</string>
    <string name="feature_nav_args_sender_doc_direct_button_label_md">"Receive `arg` directly"</string>
    <string name="feature_nav_args_sender_doc_view_model_button_label_md">"Receive `arg` via ViewModel"</string>
    <string name="feature_nav_args_sender_doc_di_button_label_md">"Receive `arg` via DI"</string>
    <string name="feature_nav_args_receiver_arg_label_md">"`arg` = "</string>
    <string name="feature_nav_args_receiver_direct_title">"Result Directly Received"</string>
    <string name="feature_nav_args_receiver_direct_method_md">"## Receiving Method\n\nGet the `Route` from the `composable`’s `NavBackStackEntry` to retrieve arguments. For example:\n\n```\nval route = navBackStackEntry.toRoute&lt;Route&gt;()\nval arg = route.arg\n```"</string>
    <string name="feature_nav_args_receiver_view_model_title">"Result Received in ViewModel"</string>
    <string name="feature_nav_args_receiver_view_model_method_md">"## Receiving Method\n\nGet the `Route` from `ViewModel`’s `SavedStateHandle` to retrieve arguments. For example:\n\n```\nval route = savedStateHandle.toRoute&lt;Route&gt;()\nval arg = route.arg\n```\n\n## Test\n\nSince `toRoute()` depends on `Bundle`, the `RobolectricTestRunner` is required for testing. For example:\n\n```\n@RunWith(RobolectricTestRunner::class)\nclass Test {\n    @Test\n    fun test() {\n        val savedStateHandle = SavedStateHandle()\n        savedStateHandle[\"arg\"] = "dummy"\n    }\n}\n```"</string>
    <string name="feature_nav_args_receiver_di_title">"Result Received via DI"</string>
    <string name="feature_nav_args_receiver_di_method_md">"## Receiving Method\n\nArguments are injected into the `ViewModel` via DI. This removes the need to call `toRoute()` in the `ViewModel` and eliminates the need for `Robolectric` in tests. With Hilt, this can be done as follows:\n\n```\n@Module\n@InstallIn(ViewModelComponent::class)\nobject RouteModule {\n    @Provides\n    fun providesRoute(savedStateHandle: SavedStateHandle): Route =\n        savedStateHandle.toRoute&lt;Route&gt;()\n}\n```"</string>
</resources>
